webpackJsonp([0],{

/***/ 712:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidacionPositivaPageModule", function() { return ValidacionPositivaPageModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__validacion_positiva__ = __webpack_require__(728);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ngx_translate_core__ = __webpack_require__(95);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var ValidacionPositivaPageModule = (function () {
    function ValidacionPositivaPageModule() {
    }
    return ValidacionPositivaPageModule;
}());
ValidacionPositivaPageModule = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["L" /* NgModule */])({
        declarations: [
            __WEBPACK_IMPORTED_MODULE_2__validacion_positiva__["a" /* ValidacionPositivaPage */],
        ],
        imports: [
            __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["f" /* IonicPageModule */].forChild(__WEBPACK_IMPORTED_MODULE_2__validacion_positiva__["a" /* ValidacionPositivaPage */]),
            __WEBPACK_IMPORTED_MODULE_3__ngx_translate_core__["b" /* TranslateModule */],
        ],
    })
], ValidacionPositivaPageModule);

//# sourceMappingURL=validacion-positiva.module.js.map

/***/ }),

/***/ 728:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ValidacionPositivaPage; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ionic_storage__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__providers_utils_utils__ = __webpack_require__(316);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__providers_http_http__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__providers_dba_dba__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ionic_native_push___ = __webpack_require__(166);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








/**
 * Generated class for the ValidacionPositivaPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */
var ValidacionPositivaPage = (function () {
    function ValidacionPositivaPage(navCtrl, navParams, storage, utils, alertCtrl, http, menuCtrl, dba, loadingCtrl, push, platform) {
        /*   se descomenta para hacer pruebas directas con la pantalla y se
             comenta el codigo que esta abajo en el constructor
        
           this.mostrarValidacion = false;
     
           let  res={
             "message": {
                 "code": "0000",
                 "description": "STATUS OK"
             },
             "messageId": "MS5KUkVTVFJFUE8uOThmZDdlZDQ5OWRmNmQxZi4yMDIxMDIxNiAxNTIyMDYuMTcwZTYxdjg2czExZmhyMm1tdTA=",
             "msgjsessionId": "c75d98fa335b125b2c36f239196e",
             "keyMessage": "key1234",
             "authType": "QR",
             "requestId": "25",
             "reasonCalled": "auth_loadPreg",
             "scoreRiskCustomer": "0",
             "deviceTrustId": "98fd7ed499df6d1f",
             "deviceTrustData": "{\"iddev\":\"98fd7ed499df6d1f\",\"model\":\"Moto G (5)\",\"cordova\":\"7.1.4\",\"plataform\":\"Android\",\"version\":\"8.1.0\",\"manufacturer\":\"motorola\",\"serial\":\"ZY322VW2LT\",\"isVirtual\":\"false\"}",
             "questionCycle":0,
             "questionQuantity": 6,
             "questions": [
                 {
                     "id": "27",
                     "method": "M",
                     "type": "B",
                     "text": "Last number of Credit Card Visa",
                     "category": "0",
                     "option01_id": "1",
                     "option02_id": "2",
                     "option03_id": "3",
                     "option01_text": "*** *** **** 5115",
                     "option02_text": "*** *** **** 7698",
                     "option03_text": "*** *** **** 2944"
                 },
                 {
                     "id": "6",
                     "method": "M",
                     "type": "B",
                     "text": "birth month",
                     "category": "0",
                     "option01_id": "1",
                     "option02_id": "2",
                     "option03_id": "3",
                     "option01_text": "Abril",
                     "option02_text": "Enero",
                     "option03_text": "Mayo"
                 },
                 {
                     "id": "30",
                     "method": "M",
                     "type": "B",
                     "text": "Number movil phone",
                     "category": "0",
                     "option01_id": "1",
                     "option02_id": "2",
                     "option03_id": "3",
                     "option01_text": "3023727088",
                     "option02_text": "3113727088",
                     "option03_text": "3193727088"
                 },
                 {
                     "id": "80",
                     "method": "A",
                     "type": "P",
                     "text": "Mother name"
                 },
                 {
                     "id": "1",
                     "method": "A",
                     "type": "C",
                     "text": "a"
                 },
                 {
                     "id": "2",
                     "method": "A",
                     "type": "C",
                     "text": "b"
                 }
             ]
           };
           
               this.btnPreguntas = true;
               this.cantQ = res.questionQuantity; // Obtiene la cantidad de preguntas para hacer
               console.log("mensaje=>preguntas: "+JSON.stringify(res));
               this.utils.errorControl(res.message.code);
             
               this.message = JSON.stringify(res);
      
               this.storage.set('MESSAGEID', res.messageId);
               this.storage.set('msgjsessionId', res.msgjsessionId);
               this.storage.set('REQUESTID', res.requestId);
               
               if (res.messageId != null || res.messageId != "") {
                 this.storage.set('MESSAGEID', res.messageId);
                 this.storage.set('msgjsessionId', res.msgjsessionId);
                 this.messageId = res.messageId;
               }
       
           
               this.qCycle = res.questionCycle;
               this.qQuantity = res.questionQuantity;
           
               this.preguntas = res.questions;
               //alert("TOTAL PREGUNTAS: "+JSON.stringify(this.preguntas));
               this.vectorPreguntas = res.questions;
               this.posQ = 0;
               var row = this.preguntas[this.posQ];
               //alert("row: "+ JSON.stringify(row));
               this.typeQ = row.method;
               //alert("type: "+this.typeQ);
               this.textQ = row.text;
               //alert("text: "+this.textQ);
               this.totalQ = 1;
           
               this.preguntasMultiples(this.typeQ, row);
     */
        var _this = this;
        this.navCtrl = navCtrl;
        this.navParams = navParams;
        this.storage = storage;
        this.utils = utils;
        this.alertCtrl = alertCtrl;
        this.http = http;
        this.menuCtrl = menuCtrl;
        this.dba = dba;
        this.loadingCtrl = loadingCtrl;
        this.push = push;
        this.platform = platform;
        this.res = null;
        this.resp = null;
        this.respuestas = [];
        this.cantQ = 0;
        // Variables para las opciones de seleccion multiple
        this.option1 = false;
        this.option2 = false;
        this.option3 = false;
        this.imgResStatus = false;
        this.imgResStatus2 = false;
        this.errorAdicional = false;
        this.btnPreguntas = false;
        this.mostrarValidacion = false;
        this.mostrarDevolver = true;
        this.mostrarDevolver = true;
        // Metodo que escucha el llamado de las notificaciones push
        platform.ready().then(function () {
            _this.notificacionPush();
            _this.mostrarDevolver = true;
        });
        // Obtencion de la longitud y la latitud de la persona
        this.storage.get('latitud').then(function (lat) {
            _this.storage.get('longitud').then(function (lon) {
                if (lat != null && lon != null) {
                    _this.latitud = lat;
                    _this.longitud = lon;
                }
            });
        });
        //Obtención del userName - Ya viene encriptado
        this.storage.get('userName').then(function (val) {
            if (val != null) {
                //this.userName = val;
                var aesUtil = new AesUtil(128, 1000);
                // Se encripta el usuario con el nuevo encript que paso hernan 2019
                _this.userName = aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, val);
            }
        });
        //Obtención del requestId del login
        this.storage.get('REQUESTID').then(function (val) {
            if (val != null) {
                _this.requestId = val;
                //alert("request id "+this.requestId);
            }
        });
        //Obtención del messageId - PROVIENE DEL LOGIN
        this.storage.get('MESSAGEID').then(function (val) {
            if (val != null) {
                _this.messageId = val;
            }
        });
        this.storage.get('msgjsessionId').then(function (val) {
            if (val != null) {
                _this.msgjsessionId = val;
            }
        });
        this.dba.searchIdFinger().then(function (idFinger) {
            _this.consultaDeviceId = idFinger;
            _this.presentLoading();
            _this.carguePreguntas();
        });
        // this.consultaDeviceId = this.searchIdDevice(); 
    }
    ValidacionPositivaPage.prototype.ionViewDidLoad = function () {
        // Inicia y valida el tiempo de sesion "esta configurado para 1 minuto"
        //this.utils.initTimeOut("si");
        //this.presentLoading();
        // this.carguePreguntas();
        // *************************
        // se cargan este tipo de preguntas solo para pruebas, borrar
        /*this.typeQ = "M";
        this.textQ = "ingrese la edad";
        this.totalQ = 3;
        this.cantQ = 4;
        this.option1_texto = "Noviembre";
        this.option2_texto = "Marzo";
        this.option3_texto = "Mayo";
        this.resp = "Respuesta OK";*/
    };
    ValidacionPositivaPage.prototype.presentLoading = function () {
        var loading = this.loadingCtrl.create({
            content: ''
        });
        loading.present();
        setTimeout(function () {
            loading.dismiss();
        }, 4000);
    };
    ValidacionPositivaPage.prototype.carguePreguntas = function () {
        var _this = this;
        this.mostrarValidacion = false;
        /*
        let  res={
          "message": {
              "code": "0000",
              "description": "STATUS OK"
          },
          "messageId": "MS5KUkVTVFJFUE8uOThmZDdlZDQ5OWRmNmQxZi4yMDIxMDIxNiAxNTIyMDYuMTcwZTYxdjg2czExZmhyMm1tdTA=",
          "msgjsessionId": "c75d98fa335b125b2c36f239196e",
          "keyMessage": "key1234",
          "authType": "QR",
          "requestId": "25",
          "reasonCalled": "auth_loadPreg",
          "scoreRiskCustomer": "0",
          "deviceTrustId": "98fd7ed499df6d1f",
          "deviceTrustData": "{\"iddev\":\"98fd7ed499df6d1f\",\"model\":\"Moto G (5)\",\"cordova\":\"7.1.4\",\"plataform\":\"Android\",\"version\":\"8.1.0\",\"manufacturer\":\"motorola\",\"serial\":\"ZY322VW2LT\",\"isVirtual\":\"false\"}",
          "questionCycle":0,
          "questionQuantity": 6,
          "questions": [
              {
                  "id": "27",
                  "method": "M",
                  "type": "B",
                  "text": "Last number of Credit Card Visa",
                  "category": "0",
                  "option01_id": "1",
                  "option02_id": "2",
                  "option03_id": "3",
                  "option01_text": "**** **** **** 5115",
                  "option02_text": "**** **** **** 7698",
                  "option03_text": "**** **** **** 2944"
              },
              {
                  "id": "6",
                  "method": "M",
                  "type": "B",
                  "text": "birth month",
                  "category": "0",
                  "option01_id": "1",
                  "option02_id": "2",
                  "option03_id": "3",
                  "option01_text": "Abril",
                  "option02_text": "Enero",
                  "option03_text": "Mayo"
              },
              {
                  "id": "30",
                  "method": "S",
                  "type": "B",
                  "text": "Number movil phone",
                  "category": "0",
                  "option01_id": "1",
                  "option02_id": "2",
                  "option03_id": "3",
                  "option01_text": "3023727088",
                  "option02_text": "3113727088",
                  "option03_text": "3193727088"
              },
              {
                  "id": "80",
                  "method": "A",
                  "type": "P",
                  "text": "Mother name"
              },
              {
                  "id": "1",
                  "method": "A",
                  "type": "C",
                  "text": "a"
              },
              {
                  "id": "2",
                  "method": "A",
                  "type": "C",
                  "text": "b"
              }
          ]
        };
        
        
        
            this.btnPreguntas = true;
            this.cantQ = res.questionQuantity; // Obtiene la cantidad de preguntas para hacer
        
            //alert("Cantidad de preguntas ciclo: "+this.cantQ);
        
             console.log("mensaje=>preguntas: "+JSON.stringify(res));
            this.utils.errorControl(res.message.code);
            //alert(res.message.code);
            this.message = JSON.stringify(res);
            //alert("MESSAGEID nuevo: "+res.messageId);
            //alert("this.message: "+this.message);
            this.storage.set('MESSAGEID', res.messageId);
            this.storage.set('msgjsessionId', res.msgjsessionId);
            this.storage.set('REQUESTID', res.requestId);
            //alert("res.requestId: "+res.requestId);
            if (res.messageId != null || res.messageId != "") {
              this.storage.set('MESSAGEID', res.messageId);
              this.storage.set('msgjsessionId', res.msgjsessionId);
              this.messageId = res.messageId;
            }
            //alert("respuesta para preguntas de seguridad: \n " + JSON.stringify(this.message));
            //alert("Preguntas2: "+res.questionQuantity+" <--> "+res.questionCycle);
            //alert("total: "+ JSON.stringify(res.questionQuantity));
            //alert("Preguntas: "+ JSON.stringify(res));
        
            this.qCycle = res.questionCycle;
            this.qQuantity = res.questionQuantity;
        
            this.preguntas = res.questions;
            //alert("TOTAL PREGUNTAS: "+JSON.stringify(this.preguntas));
            this.vectorPreguntas = res.questions;
            this.posQ = 0;
            var row = this.preguntas[this.posQ];
            //alert("row: "+ JSON.stringify(row));
            this.typeQ = row.method;
            //alert("type: "+this.typeQ);
            this.textQ = row.text;
            //alert("text: "+this.textQ);
            this.totalQ = 1;
        
            this.preguntasMultiples(this.typeQ, row);
        */
        this.storage.get('MESSAGEID').then(function (val) {
            if (val != null) {
                _this.messageId = val;
                _this.storage.get('msgjsessionId').then(function (val) {
                    if (val != null) {
                        _this.msgjsessionId = val;
                        _this.storage.get('REQUESTID').then(function (val) {
                            if (val != null) {
                                _this.requestId = val;
                                var aesUtil = new AesUtil(128, 1000);
                                var urlOtp = "auth/callReqQuestion/";
                                /*var newModel: string = this.utils.changePuntoComa(this.device.model);
                
                                this.data = '{"iddev":"' + this.device.uuid + '",' +
                                  '"model":"' + newModel + '",' +
                                  '"cordova":"' + this.device.cordova + '",' +
                                  '"plataform":"' + this.device.platform + '",' +
                                  '"version":"' + this.device.version + '",' +
                                  '"manufacturer":"' + this.device.manufacturer + '",' +
                                  '"serial":"' + this.device.serial + '",' +
                                  '"isVirtual":"' + this.device.isVirtual + '"}';*/
                                _this.data = _this.utils.infoDevice();
                                _this.encripData = aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, JSON.stringify(_this.data));
                                //Datos del dispositivo
                                _this.jsonDataDevice =
                                    {
                                        "userName": _this.userName,
                                        "authType": "QR",
                                        "data": _this.res,
                                        "requestId": _this.requestId,
                                        "messageId": _this.messageId,
                                        "msgjsessionId": _this.msgjsessionId,
                                        "keyMessage": "key1234",
                                        "device": {
                                            "iddev": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, _this.utils.deviceId)
                                        },
                                        "reasonCalled": "auth_loadPreg",
                                        "scoreRiskCustomer": "0",
                                        "geoRefLatitude": _this.latitud,
                                        "geoRefLongitude": _this.longitud,
                                        "deviceTrustId": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, _this.utils.deviceId),
                                        "deviceTrustData": _this.encripData
                                    };
                                //alert("Datos enviar auth QR: "+JSON.stringify(this.jsonDataDevice));
                                _this.http.callServer(_this.jsonDataDevice, urlOtp).then(function (res) {
                                    _this.btnPreguntas = true;
                                    _this.cantQ = res.questionQuantity; // Obtiene la cantidad de preguntas para hacer
                                    //alert("Cantidad de preguntas ciclo: "+this.cantQ);
                                    console.log("mensaje=>preguntas: " + JSON.stringify(res));
                                    _this.utils.errorControl(res.message.code);
                                    //alert(res.message.code); 
                                    _this.message = JSON.stringify(res);
                                    //alert("MESSAGEID nuevo: "+res.messageId);
                                    //alert("this.message: "+this.message); 
                                    _this.storage.set('MESSAGEID', res.messageId);
                                    _this.storage.set('msgjsessionId', res.msgjsessionId);
                                    _this.storage.set('REQUESTID', res.requestId);
                                    //alert("res.requestId: "+res.requestId);
                                    if (res.messageId != null || res.messageId != "") {
                                        _this.storage.set('MESSAGEID', res.messageId);
                                        _this.storage.set('msgjsessionId', res.msgjsessionId);
                                        _this.messageId = res.messageId;
                                    }
                                    //alert("respuesta para preguntas de seguridad: \n " + JSON.stringify(this.message));
                                    //alert("Preguntas2: "+res.questionQuantity+" <--> "+res.questionCycle);
                                    //alert("total: "+ JSON.stringify(res.questionQuantity));
                                    //alert("Preguntas: "+ JSON.stringify(res));
                                    _this.qCycle = res.questionCycle;
                                    _this.qQuantity = res.questionQuantity;
                                    _this.preguntas = res.questions;
                                    //alert("TOTAL PREGUNTAS: "+JSON.stringify(this.preguntas));
                                    _this.vectorPreguntas = res.questions;
                                    _this.posQ = 0;
                                    var row = _this.preguntas[_this.posQ];
                                    //alert("row: "+ JSON.stringify(row));
                                    _this.typeQ = row.method;
                                    //alert("type: "+this.typeQ);
                                    _this.textQ = row.text;
                                    //alert("text: "+this.textQ);
                                    _this.totalQ = 1;
                                    _this.preguntasMultiples(_this.typeQ, row);
                                }, function (error) {
                                    _this.btnPreguntas = false;
                                    if (error) {
                                        _this.utils.presentAlert("mensajePeticion" + error);
                                        _this.storage.clear();
                                        _this.utils.clearVariableSesion();
                                        _this.navCtrl.setRoot("LoginPage");
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    // Metodo que valida que las preguntas tengan su respuesta cada una
    ValidacionPositivaPage.prototype.next = function (type) {
        if (type == null || type == undefined) {
            this.utils.presentAlert('validacionPos');
        }
        else {
            this.nextPage();
        }
    };
    // Metod que devuelve de pregunta
    ValidacionPositivaPage.prototype.back = function () {
        this.posQ = this.posQ - 1;
        this.totalQ = (this.totalQ - 1);
        var row = this.preguntas[this.posQ];
        var pag = this.posQ;
        this.typeQ = row.method;
        //alert("BACK this.typeQ: "+this.typeQ);
        this.textQ = row.text;
        //alert("BACK textQ: "+this.textQ);
        this.posQ = pag;
        this.preguntasMultiples(this.typeQ, row);
    };
    // Metodo que direcciona a la siguiente pregunta
    ValidacionPositivaPage.prototype.nextPage = function () {
        //alert("next");
        this.saveQuestions(this.typeQ, this.posQ);
        //alert("llego: "+JSON.stringify(this.preguntas));
        this.posQ++;
        var row = this.preguntas[this.posQ];
        //alert("next: "+JSON.stringify(row));
        var pag = this.posQ;
        this.typeQ = row.method;
        //alert("NEXT this.typeQ: "+this.typeQ);
        this.textQ = row.text;
        //alert("NEXT textQ: "+this.textQ);
        this.totalQ = this.posQ + 1;
        //alert("3\ntotalQ: "+this.totalQ+"\ncantQ: "+this.cantQ);
        this.preguntasMultiples(this.typeQ, row);
    };
    // Metodo para guardar preguntas
    ValidacionPositivaPage.prototype.saveQuestions = function (tipoQ, pos) {
        //alert("saveQuestions");
        //alert("Va a guardar: "+tipoQ+" en la posicion: "+pos);
        switch (tipoQ) {
            case 'C':
                this.respuestas[pos] = this.answerQuestion;
                this.vectorPreguntas[pos].answer = this.answerQuestion.trim().toUpperCase();
                //alert("Pregunta que llega "+ JSON.stringify(this.vectorPreguntas[pos]));
                //alert("c: "+this.vectorPreguntas[pos].answer);
                //alert("Respuesta a enviar: "+JSON.stringify(this.vectorPreguntas[pos]));
                this.answerQuestion = "";
                break;
            case 'A':
                this.respuestas[pos] = this.answerQuestion;
                this.vectorPreguntas[pos].answer = this.answerQuestion.trim().toUpperCase();
                //alert("Pregunta que llega "+ JSON.stringify(this.vectorPreguntas[pos]));
                //alert("a: "+this.vectorPreguntas[pos].answer);
                //alert("Respuesta a enviar: "+JSON.stringify(this.vectorPreguntas[pos]));
                this.answerQuestion = "";
                break;
            case 'N':
                this.respuestas[pos] = this.answerQuestion;
                this.vectorPreguntas[pos].answer = this.answerQuestion.trim().toUpperCase();
                //alert("Pregunta que llega "+ JSON.stringify(this.vectorPreguntas[pos]));
                //alert("n: "+this.vectorPreguntas[pos].answer);
                //alert("Respuesta a enviar: "+JSON.stringify(this.vectorPreguntas[pos]));
                this.answerQuestion = "";
                break;
            case 'S':
                console.log("resp S: " + this.answerQuestion);
                this.respuestas[pos] = this.answerQuestion;
                this.vectorPreguntas[pos].answer = this.answerQuestion;
                //alert("Pregunta que llega "+ JSON.stringify(this.vectorPreguntas[pos]));
                //alert("s: "+ this.vectorPreguntas[pos].answer);
                //alert("Respuesta a enviar: "+JSON.stringify(this.vectorPreguntas[pos]));
                this.answerQuestion = null;
                break;
            case 'M':
                //alert("Tipo M Pregunta que llega "+ JSON.stringify(this.vectorPreguntas[pos]));
                var res = this.seleccionPreguntas();
                //alert("lo que selecciono en la pregunta tipo M: "+res);
                this.respuestas[pos] = res;
                this.vectorPreguntas[pos].answer = res;
                //alert("m: "+(this.vectorPreguntas[pos].answer =  res));
                //alert("Respuesta a enviar: "+JSON.stringify(this.vectorPreguntas[pos]));
                break;
            case 'R':
                //alert("Tipo R Pregunta que llega "+ JSON.stringify(this.vectorPreguntas[pos]));
                var res = this.seleccionPreguntas();
                //alert("lo que selecciono en la pregunta tipo R: "+res);
                this.respuestas[pos] = res;
                this.vectorPreguntas[pos].answer = res;
                //alert("r: "+(this.vectorPreguntas[pos].answer =  res));
                //alert("Respuesta a enviar: "+JSON.stringify(this.vectorPreguntas[pos]));
                break;
            default:
                this.btnPreguntas = false;
                this.utils.presentAlert("validacionPos.pre");
                break;
        }
    };
    ValidacionPositivaPage.prototype.mostrarDatos = function () {
        this.presentLoading();
        this.saveQuestions(this.typeQ, this.posQ);
        //alert("PREGUNTAS QUE SE VAN A ENVIAR: \n"+JSON.stringify(this.vectorPreguntas));
        this.validarRespuestas(this.vectorPreguntas);
        /*for (let i = 0; i < this.respuestas.length; i++) {
          const element = this.respuestas[i];
          alert("Dato "+i+ ": "+element);
          
        }*/
    };
    // Se obtiene las opciones de la pregunta de tipo "Multiple"
    ValidacionPositivaPage.prototype.preguntasMultiples = function (tipoM, row) {
        //alert("multiple")
        if (tipoM == 'M' || tipoM == 'R') {
            this.option1_id = row.option01_id;
            this.option2_id = row.option02_id;
            this.option3_id = row.option03_id;
            this.option4_id = row.option04_id;
            this.option5_id = row.option05_id;
            this.option1_texto = row.option01_text;
            this.option2_texto = row.option02_text;
            this.option3_texto = row.option03_text;
            this.option4_texto = row.option04_text;
            this.option5_texto = row.option05_text;
        }
    };
    // Metodo para validar las respuestas que se escoge de seleccion multiple 
    ValidacionPositivaPage.prototype.seleccionPreguntas = function () {
        var uno, dos, tres;
        var multiple;
        //alert("1: "+this.option1+" - "+(this.option1 == true)+"\n2: "+this.option2+" - "+(this.option2 == true)+"\n3: "+this.option3+" - "+(this.option3 == true));
        if (this.option1 == true) {
            uno = this.option1_id;
            //alert("uno: "+uno);
            multiple = uno;
            this.option1 = null;
            //alert("multiple1: "+multiple);
        }
        else if (this.option2 == true) {
            dos = this.option2_id;
            //alert("dos: "+dos);
            multiple = dos;
            this.option2 = null;
            //alert("multiple2: "+multiple);
        }
        else if (this.option3 == true) {
            tres = this.option3_id;
            //alert("tres: "+tres);
            multiple = tres;
            this.option3 = null;
            //alert("multiple3: "+multiple);
        }
        //alert("multiple: "+multiple);
        return multiple;
    };
    /*  Metodo para validar las respuestas de las preguntas
        y dependiendo de las respuestas se valida si se procede
        a iniciar un nuevo ciclo de preguntas
    */
    ValidacionPositivaPage.prototype.validarRespuestas = function (envioPreguntas) {
        var _this = this;
        console.log("mensaje=>envioPreguntas:" + JSON.stringify(envioPreguntas));
        this.storage.get('MESSAGEID').then(function (val) {
            if (val != null) {
                _this.messageId = val;
                _this.storage.get('msgjsessionId').then(function (val) {
                    if (val != null) {
                        _this.msgjsessionId = val;
                        _this.storage.get('REQUESTID').then(function (val) {
                            if (val != null) {
                                _this.requestId = val;
                                //alert("envia requestId: "+this.requestId);   
                                //this.consultaDeviceId = this.searchIdDevice();
                                //alert("this.consultaDeviceId: "+this.consultaDeviceId);
                                //alert("this.requestId: "+this.requestId);
                                var aesUtil = new AesUtil(128, 1000);
                                var envioDeviceID = aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, _this.consultaDeviceId);
                                var urlOtp = "auth/callValQuestion/";
                                /* var newModel: string = this.utils.changePuntoComa(this.device.model);
                 
                                 this.data = '{"iddev":"' + this.device.uuid + '",' +
                                   '"model":"' + newModel + '",' +
                                   '"cordova":"' + this.device.cordova + '",' +
                                   '"plataform":"' + this.device.platform + '",' +
                                   '"version":"' + this.device.version + '",' +
                                   '"manufacturer":"' + this.device.manufacturer + '",' +
                                   '"serial":"' + this.device.serial + '",' +
                                   '"isVirtual":"' + this.device.isVirtual + '"}';*/
                                _this.data = _this.utils.infoDevice();
                                _this.encripData = aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, JSON.stringify(_this.data));
                                //Datos del dispositivo
                                _this.jsonDataDevice =
                                    {
                                        "userName": _this.userName,
                                        "authType": "QR",
                                        "data": _this.res,
                                        "requestId": _this.requestId,
                                        "questionCycle": _this.qCycle,
                                        "questionQuantity": _this.qQuantity,
                                        "messageId": _this.messageId,
                                        "msgjsessionId": _this.msgjsessionId,
                                        "keyMessage": "key1234",
                                        "questions": envioPreguntas,
                                        "device": {
                                            "iddev": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, _this.utils.deviceId)
                                        },
                                        "optional01": envioDeviceID,
                                        "reasonCalled": "auth_validaPre",
                                        "scoreRiskCustomer": "0",
                                        "geoRefLatitude": _this.latitud,
                                        "geoRefLongitude": _this.longitud,
                                        "deviceTrustId": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, _this.utils.deviceId),
                                        "deviceTrustData": _this.encripData
                                    };
                                //alert("Datos enviar auth QR: "+JSON.stringify(this.jsonDataDevice));
                                _this.http.callServer(_this.jsonDataDevice, urlOtp).then(function (res) {
                                    //alert("Respuesta validacion preguntas: \n"+JSON.stringify(res)); 
                                    _this.btnPreguntas = true;
                                    _this.cantQ = res.questionQuantity; // Obtiene la cantidad de preguntas para hacer
                                    _this.mostrarValidacion = true; // Muestra la pantalla de validacion si es positiva o negativa
                                    _this.message = JSON.stringify(res);
                                    //alert("AQUI Respuesta preguntas: " + this.message);
                                    _this.storage.set('MESSAGEID', res.messageId);
                                    _this.storage.set('msgjsessionId', res.msgjsessionId);
                                    _this.storage.set('REQUESTID', res.requestId);
                                    if (res.messageId != null || res.messageId != "") {
                                        _this.storage.set('MESSAGEID', res.messageId);
                                        _this.storage.set('msgjsessionId', res.msgjsessionId);
                                        _this.messageId = res.messageId;
                                    }
                                    //alert("1 questionQuantity? \n" + "1 res.questionQuantity: " + res.questionQuantity);
                                    //alert("1 res.message.code: " + res.message.code + "\n1 res.message.description: " + res.message.description);
                                    if (res.message.code == "0000" || res.message.description == "STATUS OK") {
                                        //alert("2 questionQuantity?");
                                        //alert("2 res.questionQuantity: " + res.questionQuantity);
                                        if (res.questionQuantity != 0) {
                                            //alert("Entro");
                                            _this.utils.presentAlert('validacionPos.resValidate');
                                            _this.mostrarValidacion = false;
                                            _this.qCycle = 0;
                                            _this.qQuantity = 0;
                                            _this.preguntas = "";
                                            _this.vectorPreguntas = "";
                                            _this.option1 = null;
                                            _this.option2 = null;
                                            _this.option3 = null;
                                            _this.totalQ = 0;
                                            _this.cantQ = 0;
                                            _this.qCycle = res.questionCycle;
                                            _this.qQuantity = res.questionQuantity;
                                            _this.cantQ = res.questionQuantity; // Obtiene la cantidad de preguntas para hacer
                                            _this.preguntas = res.questions;
                                            _this.vectorPreguntas = res.questions;
                                            // alert("preguntas nuevas: "+this.preguntas);
                                            _this.posQ = 0;
                                            var row = _this.preguntas[_this.posQ];
                                            // alert("row nueva: "+ JSON.stringify(row));
                                            _this.typeQ = row.method;
                                            // alert("type nueva: "+JSON.stringify(this.typeQ));
                                            _this.textQ = row.text;
                                            // alert("text nueva: "+this.textQ);
                                            _this.totalQ = 1;
                                            //alert("7\ntotalQ: " + this.totalQ + "\ncantQ: " + this.cantQ);
                                            _this.preguntasMultiples(_this.typeQ, row);
                                        }
                                        else if (res.questionQuantity == 0) {
                                            _this.mostrarValidacion = true;
                                            _this.typeQ = null;
                                            _this.resp = _this.utils.getMessageLanguage("validacionPos.aceptada");
                                            document.getElementById("contenedorBtn").style.display = "none";
                                            _this.imgResStatus = true;
                                            _this.icono = "../../assets/img/verde.jpg";
                                            //this.utils.presentAlert('validacionPos.aceptada');  
                                        }
                                    }
                                    else if (res.message.code == "406") {
                                        //this.utils.alertServidor(res.message.description);
                                        _this.mostrarValidacion = true;
                                        _this.typeQ = null;
                                        document.getElementById("contenedorBtn").style.display = "none";
                                        //this.imgResStatus = true;
                                        _this.imgResStatus2 = true;
                                        _this.errorAdicional = true;
                                        _this.icono = "../../assets/img/rojo.jpg";
                                        _this.resp = _this.utils.getMessageLanguage("validacionPos.rechazado");
                                    }
                                    else if (res.message.code == "900") {
                                        _this.mostrarValidacion = true;
                                        _this.utils.alertServidor(res.message.description);
                                    }
                                    else if (res.message.code == "017") {
                                        _this.mostrarValidacion = true;
                                        _this.utils.alertServidor(res.message.description);
                                    }
                                    else {
                                        _this.mostrarValidacion = true;
                                        //alert("Entro al error controlado");
                                        _this.utils.errorControl(res.message.code);
                                    }
                                }, function (error) {
                                    //alert("error");
                                    _this.mostrarValidacion = true;
                                    if (error) {
                                        _this.utils.presentAlert("mensajePeticion" + error);
                                        /*this.utils.presentAlert("mensaje.error");
                                        this.storage.clear();
                                        this.utils.clearVariableSesion();
                                        this.navCtrl.setRoot("LoginPage");*/
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    ValidacionPositivaPage.prototype.logout = function () {
        this.utils.presentConfirm("LoginPage");
    };
    ValidacionPositivaPage.prototype.searchIdDevice = function () {
        var _this = this;
        var sql = 'select optional01 from USUARIO where time_01 = (select MAX(time_01) from USUARIO) ';
        var response = this.dba.executeQuery(sql);
        response.then(function (data) {
            console.log("DATA " + JSON.stringify(data));
            if (data.rows) {
                if (data.rows.length > 0) {
                    for (var i = 0; i < data.rows.length; i++) {
                        _this.consultaDeviceId = (data.rows.item(i).optional01);
                        //alert("Consulta bd: "+this.consultaDeviceId );            
                    }
                }
            }
        })
            .catch(function (e) { return console.log("Error al consultar " + JSON.stringify(e)); });
        return this.consultaDeviceId;
    };
    // Metodo para salir de la app
    ValidacionPositivaPage.prototype.logoutApp = function () {
        var _this = this;
        //Obtención del messageId - PROVIENE DEL LOGIN
        this.storage.get('nameUser').then(function (val) {
            if (val != null) {
                //alert("logout 2");
                var aesUtil = new AesUtil(128, 1000);
                /* var newModel: string = this.utils.changePuntoComa(this.device.model);
                 this.data = '{"iddev":"' + this.device.uuid + '",' +
                   '"model":"' + newModel + '",' +
                   '"cordova":"' + this.device.cordova + '",' +
                   '"plataform":"' + this.device.platform + '",' +
                   '"version":"' + this.device.version + '",' +
                   '"manufacturer":"' + this.device.manufacturer + '",' +
                   '"serial":"' + this.device.serial + '",' +
                   '"isVirtual":"' + this.device.isVirtual + '"}';*/
                _this.data = _this.utils.infoDevice();
                _this.encripData = aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, JSON.stringify(_this.data));
                // var iddevEnc: string = this.utils.encodePass(this.device.uuid); ASI ESTABA ANTERIORMENTE  21 MARZO 2019
                var iddevEnc = aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, _this.utils.deviceId);
                //Datos del dispositivo
                _this.jsonDataDevice =
                    {
                        "userName": val,
                        "company": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, "1"),
                        "appAuthType": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, "AUTH"),
                        "appProcess": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, "I"),
                        "device": {
                            "data": _this.encripData,
                            "iddev": iddevEnc
                        },
                        "authType": "AUTH",
                        "reasonCalled": "auth_logout",
                        "scoreRiskCustomer": "0",
                        "geoRefLatitude": _this.latitud,
                        "geoRefLongitude": _this.longitud,
                        "deviceTrustId": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, _this.utils.deviceId),
                        "deviceTrustData": _this.encripData
                    };
                /* this.jsonDataDevice2 =
                 {
                   "userName": val,
                   "device": {
                     "iddev": this.device.uuid,
                     "model": newModel,
                     "cordova": this.device.cordova,
                     "plataform": this.device.platform,
                     "version": this.device.version,
                     "manufacturer": this.device.manufacturer,
                     "serial": this.device.serial,
                     "isVirtual": this.device.isVirtual
                   }
                 }*/
                var urlLogin = "security/loginOut/";
                _this.http.callServer(_this.jsonDataDevice, urlLogin).then(function (res) {
                    //alert(res);
                    _this.message = JSON.stringify(res);
                    //alert("Respuesta Logout: "+this.message);
                    if (res.message.code == '0000' || res.message.description == 'STATUS OK') {
                        _this.utils.clearVariableSesion();
                        _this.utils.logout();
                    }
                }, function (error) {
                    _this.utils.presentAlert("mensajeConexion");
                });
            }
        });
    };
    //Metodo de confirmación para logout de la app
    ValidacionPositivaPage.prototype.presentConfirm = function () {
        var _this = this;
        var alert = this.alertCtrl.create({
            title: this.utils.getMessageLanguage("logout.message"),
            message: this.utils.getMessageLanguage("logout.titulo"),
            buttons: [
                {
                    text: this.utils.getMessageLanguage("confirm.btnCancelar"),
                    handler: function (data) {
                        if (_this.utils.getMessageLanguage("confirm.btnCancelar")) {
                            console.log("Salida Cancelada");
                        }
                    }
                },
                {
                    text: this.utils.getMessageLanguage("confirm.btnAceptar"),
                    handler: function (data) {
                        if (_this.utils.getMessageLanguage("confirm.btnAceptar")) {
                            _this.utils.presentLoading();
                            _this.logoutApp();
                        }
                    }
                }
            ]
        });
        alert.present();
    };
    // ***************** CONFIGURACION DE NOTIFICACIONES PUSH ***********************
    ValidacionPositivaPage.prototype.notificacionPush = function () {
        var _this = this;
        var titulo;
        var authVal;
        var authCod;
        var mensaje;
        // comprobamos los permisos
        this.push.hasPermission()
            .then(function (res) {
            if (res.isEnabled) {
                //alert('We have permission to send push notifications'); 
            }
            else {
                //alert('We do not have permission to send push notifications');
            }
        });
        // inicializamos la configuración para android y ios
        var options = {
            android: {
                senderID: '663636742494',
                //foreground: 'true',
                forceShow: true,
                sound: 'true'
            },
            ios: {
                alert: true,
                badge: true,
                sound: 'false'
            },
            windows: {}
        };
        var pushObject = this.push.init(options);
        pushObject.on('notification').subscribe(function (notification) {
            titulo = notification.title;
            var notificacion = notification.message;
            var temp1;
            var temp2;
            authVal = notificacion.slice(0, 2);
            temp1 = notificacion.split(" ");
            temp2 = temp1[0].split();
            authCod = temp1[0].slice(2);
            var zz = notificacion.split(":");
            mensaje = zz[1];
            _this.navCtrl.push("PushPage", { title: titulo, codOtp: authCod, msg: mensaje });
        });
        pushObject.on('registration').subscribe(function (registration) {
            var registrationId = registration.registrationId;
            var tk = registrationId;
        });
        pushObject.on('error').subscribe(function (error) {
            console.error('Error with Push plugin', error);
        });
    };
    ValidacionPositivaPage.prototype.devolverse = function () {
        this.navCtrl.push("BandejaMenuPage");
    };
    ValidacionPositivaPage.prototype.reiniciarSesion = function () {
        this.utils.reload();
    };
    return ValidacionPositivaPage;
}());
ValidacionPositivaPage = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* Component */])({
        selector: 'page-validacion-positiva',template:/*ion-inline-start:"D:\PYT\development2\AppAuthenticator\src\pages\validacion-positiva\validacion-positiva.html"*/'<ion-header>\n</ion-header>\n<ion-content class="todo" (ionScroll)="reiniciarSesion()" (click)="reiniciarSesion()">\n\n    <div style=" text-align:center !important;\n    margin-top: 40px;  width: 100%;">\n        <ion-img src="assets/img/new/LOGO.svg">\n        </ion-img>\n\n    </div>\n    <br><br><br><br><br><br><br><br>\n    <!-- Preguntas Tipo C -->\n    <div id="tipoC" *ngIf="typeQ == \'C\' || typeQ == \'A\' || typeQ == \'N\' || typeQ == \'S\' || typeQ == \'M\' || typeQ == \'R\'">\n        <ion-card>\n            <ion-card-content>\n                <!--empieza-->\n                <table>\n                    <tr *ngIf="mostrarDevolver">\n                        <td>\n                            <span class="devolver" (click)="devolverse()">                            \n                                <div id="regresarVP"></div>\n                            </span>\n                            <span class="otp">                             \n                                <div id="VP"></div>\n                            </span>\n                        </td>\n                    </tr>\n                    <br><br>\n                    <tr>\n                        <td>\n                            <div class="texto">\n                                {{ \'validacionPos.titulo\' | translate }}\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n                <!--termina-->\n                <!-- Preguntas Tipo C-->\n                <div href="#" class="activated" *ngIf="typeQ == \'C\'">\n                    <p style="font-size: initial; margin-top: 20px; color: #323232;">{{textQ}}</p>\n                </div>\n                <br *ngIf="typeQ == \'C\'">\n                <div *ngIf="typeQ == \'C\'">\n                    <ion-input [(ngModel)]="answerQuestion" type="password" placeholder="{{ \'validacionresp\' | translate }}" id="otp"></ion-input>\n                </div>\n\n                <!-- Preguntas Tipo A-->\n                <div href="#" class="activated" *ngIf="typeQ == \'A\'">\n                    <p style="font-size: initial; margin-top: 20px; color: #323232;">{{textQ}}</p>\n                </div>\n                <br *ngIf="typeQ == \'A\'">\n                <div *ngIf="typeQ == \'A\'">\n                    <ion-input [(ngModel)]="answerQuestion" type="text" placeholder="{{ \'validacionresp\' | translate }}" id="otp"></ion-input>\n                </div>\n                <br>\n                <!-- Preguntas Tipo N-->\n                <div href="#" class="activated" *ngIf="typeQ == \'N\'">\n                    <p style="margin: 8px; font-size: inherit; align-content: justify;">{{textQ}}</p>\n                </div>\n                <br *ngIf="typeQ == \'N\'">\n                <div *ngIf="typeQ == \'N\'">\n                    <ion-input [(ngModel)]="answerQuestion" type="number" placeholder="{{ \'validacionresp\' | translate }}" id="otp"></ion-input>\n                </div>\n                <!-- Preguntas Tipo S -->\n                <div href="#" class="activated" *ngIf="typeQ == \'S\'">\n                    <p style="margin-top: 10px; font-size: inherit; align-content: justify;">{{textQ}}</p>\n                </div>\n                <br *ngIf="typeQ == \'S\'">\n                <div style="margin-top: -5px;" *ngIf="typeQ == \'S\'">\n                    <ion-list radio-group [(ngModel)]="answerQuestion">\n                        <table>\n                            <tr>\n                                <td>\n                                    <span>\n                                        <ion-radio value="S" checked="true" style="margin-top: 0px; padding-bottom: 6px; padding-left: 8px;"></ion-radio>\n                                    </span>\n                                    <span style="float: right; margin-right: 77%;">\n                                        <ion-label>{{ \'addAccount.yes\' | translate }}</ion-label>\n                                    </span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <span>\n                                        <ion-radio value="N" style="margin-top: 0px; padding-bottom: 6px; padding-left: 8px;"></ion-radio>\n                                    </span>\n                                    <span style="float: right; margin-right: 78%; margin-top: 5px;">\n                                        <ion-label>{{ \'addAccount.no\' | translate }}</ion-label>\n                                    </span>\n                                </td>\n                            </tr>\n                        </table>\n                    </ion-list>\n                </div>\n                <!-- Preguntas Tipo M-->\n                <div href="#" *ngIf="typeQ == \'M\'">\n                    <p style="font-size: initial; margin-top: 20px; color: #323232;">{{textQ}}</p>\n                </div>\n                <br *ngIf="typeQ == \'M\'">\n\n                <ion-grid *ngIf="typeQ == \'M\'">\n                    <ion-row nowrap>\n                        <ion-col col-2>\n                            <ion-checkbox [(ngModel)]="option1"></ion-checkbox>\n                        </ion-col>\n                        <ion-col>\n                            <div class="prueba">{{option1_texto}}</div>\n                        </ion-col>\n                    </ion-row>\n                    <ion-row>\n                        <ion-col col-2>\n                            <ion-checkbox [(ngModel)]="option2"></ion-checkbox>\n                        </ion-col>\n                        <ion-col>\n                            <div class="prueba">{{option2_texto}}</div>\n                        </ion-col>\n                    </ion-row>\n                    <ion-row>\n                        <ion-col col-2>\n                            <ion-checkbox [(ngModel)]="option3"></ion-checkbox>\n                        </ion-col>\n                        <ion-col>\n                            <div class="prueba">{{option3_texto}}</div>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n                <!-- Preguntas Tipo R-->\n                <div href="#" *ngIf="typeQ == \'R\'">\n                    <p style="font-size: initial; margin-top: 20px; color: #323232;">{{textQ}}</p>\n                </div>\n                <br *ngIf="typeQ == \'R\'">\n                <table *ngIf="typeQ == \'R\'">\n                    <tr>\n                        <td>\n                            <ion-checkbox [(ngModel)]="option1"></ion-checkbox>\n                        </td>\n                        <td>\n                            <ion-label>{{option1_texto}}</ion-label>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <ion-checkbox [(ngModel)]="option2"></ion-checkbox>\n                        </td>\n                        <td>\n                            <ion-label>{{option2_texto}}</ion-label>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <ion-checkbox [(ngModel)]="option3"></ion-checkbox>\n                        </td>\n                        <td>\n                            <ion-label>{{option3_texto}}</ion-label>\n                        </td>\n                    </tr>\n                </table>\n                <br>\n                <div *ngIf="totalQ <= cantQ">\n                    <span *ngIf="totalQ > 1">                       \n                        <button\n                            style="float: left; box-shadow: 0px 0px 5px 1px white; width: 90px; border-radius: 10px; height: 36px;"\n                            (click)="back()">\n                          \n                            <ion-icon ios="md-arrow-round-back" md="md-arrow-round-back"\n                                style="margin-top: 2px; min-height: 30px; color: #FF3C00;"></ion-icon>\n                        </button>\n                    </span>\n                </div>\n                <div *ngIf="totalQ < cantQ">\n                    <span *ngIf="typeQ != \'M\' && typeQ != \'R\'   ">            \n                    <button\n                        style="float: right; box-shadow: 0px 0px 5px 1px white; width: 90px; border-radius: 10px; height: 36px;"\n                        (click)="next(answerQuestion)">\n                        <ion-icon ios="md-arrow-round-forward" md="md-arrow-round-forward"\n                            style="margin-top: 2px; min-height: 30px; color: #FF3C00;"></ion-icon>\n                    </button>\n                </span>\n                    <button *ngIf="typeQ == \'M\' || typeQ == \'R\'  " style="float: right; box-shadow: 0px 0px 5px 1px white; width: 90px; border-radius: 10px; height: 36px;" (click)="nextPage()">\n                        <ion-icon ios="md-arrow-round-forward" md="md-arrow-round-forward"\n                            style="margin-top: 2px; min-height: 30px; color: #FF3C00;"></ion-icon>\n                    </button>\n                </div>\n\n                <!-- *ngIf="btnPreguntas"-->\n                <div *ngIf="btnPreguntas">\n                    <div *ngIf="totalQ == cantQ">\n                        <div id="contenedorBtn">\n                            <button style="float: right; box-shadow: 0px 0px 5px 1px white; width: 90px; border-radius: 10px; height: 36px; color: #FF3C00; font-weight: bold; font-size: medium;" (click)="mostrarDatos()">                               \n                                {{ \'validacionPos.btn\' | translate }}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </ion-card-content>\n        </ion-card>\n    </div>\n    <!--Aqui termina todo la configuracion de las preguntas de validacion positiva-->\n    <ion-card style="height: 45%;" *ngIf="mostrarValidacion">\n        <ion-card-content>\n            <!--empieza-->\n            <table>\n                <tr *ngIf="mostrarDevolver">\n                    <td>\n                        <span class="devolver" (click)="devolverse()">                         \n                            <div id="regresarVP"></div>\n                        </span>\n                        <span class="otp">                            \n                            <div id="VP"></div>\n                        </span>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div class="texto">\n                            {{ \'validacionPos.titulo\' | translate }}\n                        </div>\n                    </td>\n                </tr>\n            </table>\n            <!--termina-->\n            <!-- -->\n            <div *ngIf="imgResStatus" class="confirmExitosa"></div>\n            <div *ngIf="errorAdicional" class="confirmFallida"></div>\n            <br>\n            <!---->\n            <p *ngIf="imgResStatus" class="respServer" style="color: #D2D20A; font-family: Helvetica;">{{ resp }}</p>\n            <p *ngIf="imgResStatus2" class="respServer" style="color: #FF3C00;  font-family: Helvetica;">{{ resp }}</p>\n        </ion-card-content>\n    </ion-card>\n</ion-content>'/*ion-inline-end:"D:\PYT\development2\AppAuthenticator\src\pages\validacion-positiva\validacion-positiva.html"*/,
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__["j" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["k" /* NavParams */], __WEBPACK_IMPORTED_MODULE_2__ionic_storage__["b" /* Storage */], __WEBPACK_IMPORTED_MODULE_3__providers_utils_utils__["a" /* UtilsProvider */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["a" /* AlertController */],
        __WEBPACK_IMPORTED_MODULE_4__providers_http_http__["a" /* HttpProvider */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["h" /* MenuController */], __WEBPACK_IMPORTED_MODULE_5__providers_dba_dba__["a" /* DbaProvider */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["g" /* LoadingController */], __WEBPACK_IMPORTED_MODULE_6__ionic_native_push___["a" /* Push */],
        __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["l" /* Platform */]])
], ValidacionPositivaPage);

//# sourceMappingURL=validacion-positiva.js.map

/***/ })

});
//# sourceMappingURL=0.js.map