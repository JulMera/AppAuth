webpackJsonp([5],{

/***/ 707:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RegistroAfiliacionPageModule", function() { return RegistroAfiliacionPageModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__registro_afiliacion__ = __webpack_require__(723);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ngx_translate_core__ = __webpack_require__(95);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var RegistroAfiliacionPageModule = (function () {
    function RegistroAfiliacionPageModule() {
    }
    return RegistroAfiliacionPageModule;
}());
RegistroAfiliacionPageModule = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["L" /* NgModule */])({
        declarations: [
            __WEBPACK_IMPORTED_MODULE_2__registro_afiliacion__["a" /* RegistroAfiliacionPage */],
        ],
        imports: [
            __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["f" /* IonicPageModule */].forChild(__WEBPACK_IMPORTED_MODULE_2__registro_afiliacion__["a" /* RegistroAfiliacionPage */]),
            __WEBPACK_IMPORTED_MODULE_3__ngx_translate_core__["b" /* TranslateModule */]
        ],
    })
], RegistroAfiliacionPageModule);

//# sourceMappingURL=registro-afiliacion.module.js.map

/***/ }),

/***/ 723:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RegistroAfiliacionPage; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__providers_utils_utils__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ngx_translate_core__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__providers_http_http__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ionic_storage__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__providers_dba_dba__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__ionic_native_push___ = __webpack_require__(167);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









/**
 * Generated class for the RegistroAfiliacionPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */
var RegistroAfiliacionPage = (function () {
    function RegistroAfiliacionPage(navCtrl, navParams, utils, translateService, alertCtrl, http, storage, dba, push, platform) {
        var _this = this;
        this.navCtrl = navCtrl;
        this.navParams = navParams;
        this.utils = utils;
        this.translateService = translateService;
        this.alertCtrl = alertCtrl;
        this.http = http;
        this.storage = storage;
        this.dba = dba;
        this.push = push;
        this.value = true;
        this.isBtnEnabledAfi = false;
        this.idioma = false;
        console.log("mensaje=>constructor RegistroAfiliacionPage");
        this.emisorApp = this.utils.variablesGlobales("emisorApp");
        this.appProcess = this.utils.variablesGlobales("appProcess");
        // Obtencion de la longitud y la latitud de la persona
        this.storage.get('latitud').then(function (lat) {
            _this.storage.get('longitud').then(function (lon) {
                if (lat != null && lon != null) {
                    _this.latitud = lat;
                    _this.longitud = lon;
                }
            });
        });
        //Obtención del pushId - PROVIENE DEL app.componet
        /*this.storage.get('pushID').then((val) => {
    
          if (val != null) {
            this.pushID = val;
            //alert("pushId enviar 1: "+this.pushID);
          }
        });*/
        /*this.storage.get('pushID').then((val) => {
    
          if (val != null) {
            this.pushID = val;
            //alert("pushId enviar 2: "+this.pushID);
          }
        });*/
        platform.ready().then(function () {
            //alert("Entro Registro afiliacion");
            _this.push.hasPermission()
                .then(function (res) {
                //alert("res"+res)
                if (res.isEnabled) {
                    // alert('We have permission to send push notifications'); 
                }
                else {
                    // alert('We do not have permission to send push notifications');
                }
            });
            // inicializamos la configuración para android y ios
            var options = {
                android: {
                    senderID: '663636742494',
                    //foreground: 'true',
                    forceShow: true,
                    sound: 'true'
                },
                ios: {
                    alert: true,
                    badge: true,
                    sound: 'false'
                },
                windows: {}
            };
            /* const pushObject: PushObject = this.push.init(options);
       
             pushObject.on('notification').subscribe((notification: any) => {
       
             });
       
             pushObject.on('registration').subscribe((registration: any) => {
               const registrarId = registration.registrationId;
               this.idDispositivoPush = registrarId;
               //this.afiliacion(registrarId);
       
             });
       
             pushObject.on('error').subscribe(error => {
               console.error('Error with Push plugin', error)
             });*/
        });
        //Metodo para cuando se le de back al celular cierre la app y lo envie al login
        this.utils.outApp("RegistroAfiliacionPage");
        //Obtención del messageId - PROVIENE DEL LOGIN
        this.storage.get('MESSAGEID').then(function (val) {
            if (val != null) {
                _this.messageId = val;
                //alert("messageId enviar: "+this.messageId);
            }
        });
        this.storage.get('msgjsessionId').then(function (val) {
            if (val != null) {
                _this.msgjsessionId = val;
            }
        });
        //se crea la base de datos y la tabla
        this.dba.createDataBaseFile();
        // Metodo para llamar al validtaeE2E para comprobar que el dispositivo este disponible
        this.validateE2E();
        console.log("mensaje=>constructor RegistroAfiliacionPage2");
    }
    RegistroAfiliacionPage.prototype.ionViewDidLoad = function () { };
    RegistroAfiliacionPage.prototype.condiciones = function () {
        if (this.usuario == null && this.pass == null) {
            this.presentAlert();
        }
        else {
            this.utils.userLogin = this.usuario.trim().toUpperCase();
            this.navCtrl.push("CondicionesPage", { lenguajeSeleccionadoAfiliacion: this.navParams.get("lenguajeSeleccionadoLogin") });
        }
    };
    RegistroAfiliacionPage.prototype.registrar = function () {
        if (!this.value) {
            this.utils.presentAlert("registroAfiliacion.msj");
        }
        else {
            this.navCtrl.push("LoginPage");
        }
    };
    RegistroAfiliacionPage.prototype.afiliacion = function (pushID) {
        var _this = this;
        this.storage.get('pushID').then(function (val) {
            if (val != null) {
                _this.pushID = val;
                console.log("mensaje=>pushID: " + _this.pushID);
            }
            _this.envioAfiliacion();
        });
    };
    RegistroAfiliacionPage.prototype.envioAfiliacion = function () {
        var _this = this;
        try {
            // Se elimina la tabla para crear los registros limpios desde cero
            this.dba.dropTable();
            var aesUtil = new AesUtil(128, 1000);
            this.dba.createDataBaseFile();
            if (this.usuario == null && this.pass == null) {
                this.presentAlert();
            }
            else {
                //alert("1");
                if (this.value == false) {
                    this.utils.presentAlert("registroAfiliacion.msj");
                }
                else {
                    //se guarda en sesion el valor obtenido de los terminos y condiciones
                    this.storage.set("terminoCondi", this.value);
                    this.isBtnEnabledAfi = true;
                    var urlAfiliacion = "device/afiliation/";
                    var use = this.usuario.trim().toUpperCase();
                    var userLogin = use;
                    var user = aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, userLogin);
                    var passw = aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, this.pass);
                    /* try {
                       this.device.model = this.device.model.replace(",",".");
                       this.device.version= this.device.version.replace(",",".");
                     } catch (error) {
                       this.utils.presentAlert("Error Change punto - coma");
                     }
             
                     var newModel: string = this.utils.changePuntoComa(this.device.model);
             
                     this.data = '{"iddev":"' + this.device.uuid + '",' +
                                 '"model":"' + newModel + '",' +
                                 '"cordova":"' + this.device.cordova + '",' +
                                 '"plataform":"' + this.device.platform + '",' +
                                 '"version":"' + this.device.version + '",' +
                                 '"manufacturer":"' + this.device.manufacturer + '",' +
                                 '"serial":"' + this.device.serial + '",' +
                                 '"isVirtual":"' + this.device.isVirtual + '"}';*/
                    this.utils.userLogin = userLogin;
                    this.data = this.utils.infoDevice();
                    this.encripData = aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, JSON.stringify(this.data));
                    var deviceUUID = "";
                    if (this.data.iddev) {
                        aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, this.data.iddev);
                        //  var deviceUUID = aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, this.device.uuid);
                    }
                    //Datos del dispositivo
                    this.jsonDataDevice =
                        {
                            "userName": user,
                            "userPasw": passw,
                            // "messageId": this.messageId,
                            // "msgjsessionId": this.msgjsessionId,
                            "appAuthType": aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, "AUTH"),
                            "device": {
                                //"iddev": deviceUUID, //esta va hacer la llave para encriptar
                                "data": this.encripData
                            },
                            "pushIdSus": this.pushID,
                            "authType": "AUTH",
                            "reasonCalled": "auth_afili",
                            "scoreRiskCustomer": "0",
                            "geoRefLatitude": this.latitud,
                            "geoRefLongitude": this.longitud,
                            //"deviceTrustId"     : aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, this.device.uuid),
                            "deviceTrustData": this.encripData,
                            "internalUserName": this.emisorApp,
                            "appProcess": this.appProcess,
                            "idkey": this.http.idkey
                        };
                    //alert("JSON ENVIAR: "+JSON.stringify(this.jsonDataDevice));
                    this.http.callServer(this.jsonDataDevice, urlAfiliacion).then(function (res) {
                        //alert("3");
                        _this.message = JSON.stringify(res);
                        //alert("REGISTRO AFILIACION-> "+this.message);
                        _this.storage.set('MESSAGEID', res.messageId);
                        _this.storage.set('msgjsessionId', res.msgjsessionId);
                        console.log("RESPUESTA AFILIACION: \n" + _this.message);
                        // -----> llego para guardar optional01
                        _this.storage.set('OPTIONAL01', res.optional01);
                        //alert("el optional que se va a guardar "+res.optional01); ///borrar despues
                        //Se guarda en base de datos el opcional01 para el login por huella
                        if (res.message.code == 101) {
                            _this.utils.presentAlert('mensajeSesion');
                            _this.storage.clear();
                            _this.utils.clearVariableSesion();
                            _this.navCtrl.push("LoginPage");
                        }
                        if (res != '' && typeof res !== "undefined") {
                            //this.utils.alertServidor(this.message.code);
                            if (res.message.code == "0000" || res.message.description == "STATUS OK") {
                                //se decodifican las llaves de encripcion
                                var respuesta = _this.utils.decodeText(res.key);
                                _this.http.salt = respuesta.split(",")[0];
                                _this.http.iv = respuesta.split(",")[1];
                                _this.http.passphrase = respuesta.split(",")[2];
                                _this.http.idkey = respuesta.split(",")[3];
                                _this.dba.deleteDeviceConfig();
                                _this.dba.saveDeviceConfig(_this.http.idkey, _this.http.salt, _this.http.iv, _this.http.passphrase);
                                _this.dba.guardarBD(res.optional01);
                                console.log("mensaje=>id dispositivo: " + res.optional01);
                                _this.utils.presentAlert("message.code0000");
                                _this.navCtrl.push("LoginPage");
                            }
                            else {
                                _this.utils.presentAlert(res.message.description);
                                _this.isBtnEnabledAfi = false;
                            }
                        }
                    }, function (error) {
                        _this.utils.presentAlert("mensajePeticion" + error);
                        _this.storage.clear();
                        _this.utils.clearVariableSesion();
                        //this.navCtrl.setRoot("LoginPage"); 
                        _this.isBtnEnabledAfi = false;
                    });
                }
            }
        }
        catch (error) {
            alert("ERROR: " + error);
        }
    };
    // Metodo para llamar al validtaeE2E para comprobar que el dispositivo este disponible
    RegistroAfiliacionPage.prototype.validateE2E = function () {
        var _this = this;
        var urlAfiliacion = "device/validateE2E/";
        /* try {
           this.device.model = this.device.model.replace(",",".");
           this.device.version= this.device.version.replace(",",".");
         } catch (error) {
           this.utils.presentAlert("Error Change punto - coma");
         }
    
         var newModel: string = this.utils.changePuntoComa(this.device.model);
    
         this.data = '{"iddev":"' + this.device.uuid + '",' +
                       '"model":"' + newModel + '",' +
                       '"cordova":"' + this.device.cordova + '",' +
                       '"plataform":"' + this.device.platform + '",' +
                       '"version":"' + this.device.version + '",' +
                       '"manufacturer":"' + this.device.manufacturer + '",' +
                       '"serial":"' + this.device.serial + '",' +
                       '"isVirtual":"' + this.device.isVirtual + '"}';*/
        console.log("mensaje=> entro validateE2E");
        this.data = this.utils.infoDevice();
        //this.encripData = this.utils.encodePass(JSON.stringify(this.data));
        console.log("mensaje=> entro validateE2E 2");
        //this.encripData = this.utils.encodePass(this.data);
        var aesUtil = new AesUtil(128, 1000);
        this.encripData = aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, JSON.stringify(this.data));
        var deviceUUID = aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, this.data.iddev);
        //alert("consulta de dispositivo: "+this.messageId); 
        //Datos del dispositivo
        this.jsonDataDevice =
            {
                "messageId": this.messageId,
                "msgjsessionId": this.msgjsessionId,
                "appAuthType": aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, "AUTH"),
                "device": {
                    "iddev": deviceUUID,
                    "data": this.encripData
                },
                "authType": "AUTH",
                "reasonCalled": "auth_afili",
                "scoreRiskCustomer": "0",
                "geoRefLatitude": this.latitud,
                "geoRefLongitude": this.longitud,
                "deviceTrustId": aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, this.data.iddev),
                "deviceTrustData": this.encripData,
                "idkey": this.http.idkey
            };
        this.http.callServer(this.jsonDataDevice, urlAfiliacion).then(function (res) {
            console.log("mensaje=>validateE2E respuesta: " + JSON.stringify(res));
            _this.message = JSON.stringify(res);
            _this.storage.set('MESSAGEID', _this.messageId);
            _this.storage.set('msgjsessionId', res.msgjsessionId);
            if (res != '' && typeof res !== "undefined") {
                if (res.message.code == "0000" || res.message.description == "STATUS OK") {
                }
                else {
                    _this.utils.presentAlert("mensaje404");
                    _this.isBtnEnabledAfi = true;
                }
            }
        }, function (error) {
            console.log("mensaje=> error validateE2E: " + error);
        })
            .catch(function (error) {
            if (error) {
                _this.utils.presentAlert("R.Afi: " + error);
            }
        });
    };
    RegistroAfiliacionPage.prototype.presentAlert = function () {
        var alertTitle;
        this.translateService.get('Login.alertValidate').subscribe(function (value) {
            alertTitle = value;
        });
        var alert = this.alertCtrl.create({
            title: this.utils.getMessageLanguage("logout.message"),
            message: alertTitle,
            buttons: ['OK']
        });
        alert.present();
    };
    RegistroAfiliacionPage.prototype.reiniciarSesion = function () {
        this.utils.reload();
    };
    return RegistroAfiliacionPage;
}());
RegistroAfiliacionPage = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* Component */])({
        selector: 'page-registro-afiliacion',template:/*ion-inline-start:"D:\PYT\development2\AppAuthenticator\src\pages\registro-afiliacion\registro-afiliacion.html"*/'<ion-header>\n</ion-header>\n\n<ion-content class="todo" (ionScroll)="reiniciarSesion()" (click)="reiniciarSesion()">\n\n    <br><br><br><br>\n\n    <ion-img style="width: 280px;\n                  height: 80px; \n                  left: 15%;\n                  top: 80px;    \n                  position: absolute;\n                  margin-left: auto;\n                  margin:10px;\n                  display:block; \n                  background: #F0F2F4;" src="assets/img/new/LOGO.svg">\n    </ion-img>\n\n    <br><br><br><br><br><br><br>\n\n    <!--<div id="loginForm">\n\n    <ion-list class="item no-padding">\n      <ion-item>\n        <ion-label>\n          <ion-icon name="person"></ion-icon>\n        </ion-label>\n        <ion-input [(ngModel)]="usuario" type="text" placeholder="{{ \'Login.user\' | translate }}" class="confondo"></ion-input>\n      </ion-item>\n      \n      <ion-item>\n        <ion-label>\n          <ion-icon name="lock"></ion-icon>\n        </ion-label>\n        <ion-input [(ngModel)]="pass" type="password" placeholder="{{ \'Login.pass\' | translate }}"  class="confondo"> </ion-input>\n      </ion-item>\n    </ion-list>\n\n    <table style="width:80%">\n      <tr>\n        <td><button class="termi_Condi" (click)="condiciones()"><u class="subrayado">{{\'registroAfiliacion.condicion\' | translate}}</u></button></td>\n        <td><ion-toggle [(ngModel)]="value" color="primary" (ionChange)="notify(value)" style="width: 60px;"></ion-toggle></td> \n      </tr>\n      <tr>\n        \n      </tr>\n    </table>\n    <br>\n    <div>\n      <button ion-button outline (click)="afiliacion()" id="btnLogin" [disabled]="isBtnEnabledAfi" style="box-shadow: 0px 0px 5px 1px white;">{{\'registroAfiliacion.btn\' | translate}}</button>\n    </div>\n  </div>-->\n\n\n    <!-- ************************ -->\n    <ion-card>\n        <ion-card-content>\n\n            <div class="inicioSesion">\n                {{ \'registroAfiliacion.registro\' | translate }}\n            </div>\n\n            <table width="100%" class="tabla1">\n                <tr>\n                    <td>\n                        <ion-input [(ngModel)]="usuario" type="text" placeholder="{{ \'Login.user\' | translate }}" class="colorGris"></ion-input>\n                    </td>\n                    <td>\n                        <ion-img src="assets/img/new/INICIO_USUARIO.png" style="width: 10px; height: 10px;  margin:5px auto; display:block;"></ion-img>\n                    </td>\n                </tr>\n            </table>\n\n            <table width="100%" class="tabla1">\n                <tr>\n                    <td>\n                        <ion-input [(ngModel)]="pass" type="password" placeholder="{{ \'Login.pass\' | translate }}" class="colorGris"> </ion-input>\n                    </td>\n                    <td>\n                        <ion-img src="assets/img/new/INICIO_PASW.png" style="width: 10px; height: 10px;  margin:5px auto; display:block;"></ion-img>\n                    </td>\n                </tr>\n            </table>\n\n            <br>\n\n            <table style="width:100%">\n                <tr>\n                    <td><button class="termi_Condi" (click)="condiciones()"><u class="subrayado">{{\'registroAfiliacion.condicion\' | translate}}</u></button></td>\n                    <!--*ngIf="idioma"-->\n                    <td>\n                        <!--<ion-toggle [(ngModel)]="value" color="primary" (ionChange)="notify(value)" style="width: 60px;"></ion-toggle>-->\n                        <ion-img src="assets/img/new/IDIOMA_SELECCIONADO.png" style="width: 10px; height: 10px;"></ion-img>\n                    </td>\n                </tr>\n                <tr>\n\n                </tr>\n            </table>\n            <br>\n            <div>\n                <button ion-button outline (click)="afiliacion()" id="btnLogin" [disabled]="isBtnEnabledAfi" style="box-shadow: 0px 0px 5px 1px white;">{{\'registroAfiliacion.btn\' | translate}}</button>\n            </div>\n\n        </ion-card-content>\n    </ion-card>\n\n</ion-content>'/*ion-inline-end:"D:\PYT\development2\AppAuthenticator\src\pages\registro-afiliacion\registro-afiliacion.html"*/,
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__["j" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["k" /* NavParams */], __WEBPACK_IMPORTED_MODULE_2__providers_utils_utils__["a" /* UtilsProvider */], __WEBPACK_IMPORTED_MODULE_3__ngx_translate_core__["c" /* TranslateService */],
        __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["a" /* AlertController */], __WEBPACK_IMPORTED_MODULE_4__providers_http_http__["a" /* HttpProvider */], __WEBPACK_IMPORTED_MODULE_5__ionic_storage__["b" /* Storage */], __WEBPACK_IMPORTED_MODULE_6__providers_dba_dba__["a" /* DbaProvider */],
        __WEBPACK_IMPORTED_MODULE_7__ionic_native_push___["a" /* Push */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["l" /* Platform */]])
], RegistroAfiliacionPage);

//# sourceMappingURL=registro-afiliacion.js.map

/***/ })

});
//# sourceMappingURL=5.js.map