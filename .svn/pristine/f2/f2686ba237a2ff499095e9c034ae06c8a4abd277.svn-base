webpackJsonp([6],{

/***/ 706:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QrPageModule", function() { return QrPageModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__qr__ = __webpack_require__(722);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ngx_translate_core__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_ngx_qrcode2__ = __webpack_require__(319);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





var QrPageModule = (function () {
    function QrPageModule() {
    }
    return QrPageModule;
}());
QrPageModule = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["L" /* NgModule */])({
        declarations: [
            __WEBPACK_IMPORTED_MODULE_2__qr__["a" /* QrPage */],
        ],
        imports: [
            __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["f" /* IonicPageModule */].forChild(__WEBPACK_IMPORTED_MODULE_2__qr__["a" /* QrPage */]),
            __WEBPACK_IMPORTED_MODULE_3__ngx_translate_core__["b" /* TranslateModule */],
            __WEBPACK_IMPORTED_MODULE_4_ngx_qrcode2__["a" /* NgxQRCodeModule */]
        ],
    })
], QrPageModule);

//# sourceMappingURL=qr.module.js.map

/***/ }),

/***/ 722:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QrPage; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ionic_native_barcode_scanner__ = __webpack_require__(321);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ionic_storage__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__providers_utils_utils__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__providers_http_http__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ionic_native_push___ = __webpack_require__(167);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








/**
 * Generated class for the QrPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */
var QrPage = (function () {
    function QrPage(navCtrl, navParams, barcodeScanner, storage, utils, http, menuCtrl, alertCtrl, push, platform) {
        var _this = this;
        this.navCtrl = navCtrl;
        this.navParams = navParams;
        this.barcodeScanner = barcodeScanner;
        this.storage = storage;
        this.utils = utils;
        this.http = http;
        this.menuCtrl = menuCtrl;
        this.alertCtrl = alertCtrl;
        this.push = push;
        this.platform = platform;
        this.qrData = null;
        this.createdCode = null;
        this.scannedCode = null;
        this.mostrarCreatedCode = false;
        this.res = null;
        this.resp = null;
        this.imgResStatus = false;
        this.errorAdicional = false;
        this.btnScanerQR = true;
        // Metodo que escucha el llamado de las notificaciones push
        platform.ready().then(function () {
            _this.notificacionPush();
            //Metodo para cuando se le de back al celular cierre la app y lo envie al login
            _this.utils.outApp("LoginPage");
        });
        // Obtencion de la longitud y la latitud de la persona
        this.storage.get('latitud').then(function (lat) {
            _this.storage.get('longitud').then(function (lon) {
                if (lat != null && lon != null) {
                    _this.latitud = lat;
                    _this.longitud = lon;
                }
            });
        });
        //alert("constructor");
        //Metodo para cuando se le de back al celular cierre la app y lo envie al login
        this.utils.outApp("QrPage");
        //Obtención del userName - Ya viene encriptado
        this.storage.get('userName').then(function (val) {
            if (val != null) {
                //this.userName = val;
                var aesUtil = new AesUtil(128, 1000);
                // Se encripta el usuario con el nuevo encript que paso hernan 2019
                _this.userName = aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, val);
            }
        });
        //Obtención del requestId del login
        this.storage.get('REQUESTID').then(function (val) {
            if (val != null) {
                _this.requestId = val;
                //alert("request id "+this.requestId);
            }
        });
        //Obtención del messageId - PROVIENE DEL LOGIN
        this.storage.get('MESSAGEID').then(function (val) {
            if (val != null) {
                _this.messageId = val;
            }
        });
        this.storage.get('msgjsessionId').then(function (val) {
            if (val != null) {
                _this.msgjsessionId = val;
            }
        });
        this.storage.get('AUTHTYPE').then(function (val) {
            if (val != null) {
                _this.authType = val;
                //alert("auth Type "+this.authType);
            }
        });
    }
    QrPage.prototype.ionViewDidLoad = function () {
        // Inicia y valida el tiempo de sesion "esta configurado para 1 minuto"
        //this.utils.initTimeOut("si");
        var _this = this;
        this.storage.get('AUTHTYPE').then(function (val) {
            if (val != null) {
                _this.authType = val;
            }
        });
        //Obtención del AuthData del login
        this.storage.get('AUTHDATA').then(function (val) {
            if (val != null) {
                //alert("auth data "+val);
                if (_this.authType == "QR") {
                    _this.authData = val;
                }
                else {
                    _this.authData = "";
                }
            }
        });
        //Obtención del DeliveryCh del login
        this.storage.get('DELIVERYCH').then(function (val) {
            //alert("delivery channel: "+val);
            if (val != null) {
                //alert((val == 'true'));
                if (val == 'true') {
                    _this.mostrarCreatedCode = true;
                    _this.btnScanerQR = true;
                    _this.deliveryCh = val;
                    //alert("auth QR: "+this.authData);
                    _this.createCode(_this.authData);
                }
            }
        });
        //Obtención del ResponseCh del login
        this.storage.get('RESPONSECH').then(function (val) {
            //alert("response chanell: "+val);
            if (val != null) {
                if (val == 'true' || val == true) {
                    _this.responseCh = val;
                    _this.btnScanerQR = false;
                    //this.scanCode();
                }
            }
        });
    };
    QrPage.prototype.createCode = function (createQR) {
        // Inicia y valida el tiempo de sesion "esta configurado para 1 minuto"
        //this.utils.initTimeOut();
        this.createdCode = createQR;
    };
    QrPage.prototype.scanCode = function () {
        //alert("scanCode1");
        // Inicia y valida el tiempo de sesion "esta configurado para 1 minuto"
        //this.utils.initTimeOut();
        var _this = this;
        try {
            var mensaje = this.utils.getMessageLanguage("mensajeQr");
            this.options = {
                prompt: mensaje
            };
            this.barcodeScanner.scan(this.options).then(function (barcodeData) {
                console.log("mensaje=>scaner lector:" + barcodeData.text);
                _this.scannedCode = barcodeData.text;
                _this.res = _this.scannedCode;
                //alert("dato scaneado: "+this.scannedCode);
                _this.authQR();
                //this.storage.set("valorQR", this.res);
            }, function (err) {
                console.log('Error 1: ' + err);
            });
        }
        catch (error) {
            console.log("error scancode " + error);
        }
    };
    QrPage.prototype.scanCode2 = function () {
        var _this = this;
        //alert("scanCode2");
        this.barcodeScanner.scan().then(function (barcodeData) {
            _this.scannedCode = barcodeData.text;
            _this.res = _this.scannedCode;
            //alert("dato scaneado: "+this.scannedCode);
            _this.authQR();
            //this.storage.set("valorQR", this.res);
        }, function (err) {
            console.log('Error: ' + err);
        });
    };
    QrPage.prototype.encode = function () {
        var _this = this;
        //alert("encode");
        this.barcodeScanner.encode(this.barcodeScanner.Encode.TEXT_TYPE, this.qrData).then(function (data) {
            _this.createdCode = data;
        }, function (err) {
            console.log('Error encode: ', err);
        });
    };
    //metodo para validar QR - 
    QrPage.prototype.authQR = function () {
        var _this = this;
        var aesUtil = new AesUtil(128, 1000);
        var urlOtp = "auth/callAuth/";
        /*var newModel: string = this.utils.changePuntoComa(this.device.model);
    
        this.data = '{"iddev":"' + this.device.uuid + '",' +
                    '"model":"' + newModel + '",' +
                    '"cordova":"' + this.device.cordova + '",' +
                    '"plataform":"' + this.device.platform + '",' +
                    '"version":"' + this.device.version + '",' +
                    '"manufacturer":"' + this.device.manufacturer + '",' +
                    '"serial":"' + this.device.serial + '",' +
                    '"isVirtual":"' + this.device.isVirtual + '"}';
                    
        this.encripData = aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, this.data);*/
        this.data = this.utils.infoDevice();
        this.encripData = aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, JSON.stringify(this.data));
        console.log("mensaje=>scaner envio:" + this.res);
        //Datos del dispositivo
        this.jsonDataDevice =
            {
                "userName": this.userName,
                "authType": "QR",
                "data": this.res,
                "requestId": this.requestId,
                "messageId": this.messageId,
                "msgjsessionId": this.msgjsessionId,
                "keyMessage": "key1234",
                "device": {
                    "iddev": aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, this.utils.deviceId)
                },
                "reasonCalled": "auth_QR",
                "scoreRiskCustomer": "0",
                "geoRefLatitude": this.latitud,
                "geoRefLongitude": this.longitud,
                "deviceTrustId": aesUtil.encrypt(this.http.salt, this.http.iv, this.http.passphrase, this.utils.deviceId),
                "deviceTrustData": this.encripData,
                "idkey": this.http.idkey
            };
        //alert("Datos enviar auth QR: "+JSON.stringify(this.jsonDataDevice));
        this.http.callServer(this.jsonDataDevice, urlOtp).then(function (res) {
            _this.message = JSON.stringify(res);
            _this.storage.set('MESSAGEID', res.messageId);
            _this.storage.set('msgjsessionId', res.msgjsessionId);
            if (res.messageId != null || res.messageId != "") {
                _this.storage.set('MESSAGEID', res.messageId);
                _this.storage.set('msgjsessionId', res.msgjsessionId);
                _this.messageId = res.messageId;
            }
            try {
                _this.utils.errorControl(res.message.code);
                if (res.message.description == "STATUS OK") {
                    //this.navCtrl.push('MenuPage');
                    _this.imgResStatus = true;
                    _this.errorAdicional = false;
                    _this.icono = "../../assets/img/verde.jpg";
                    _this.utils.presentAlert("mensaje.auth");
                    _this.resp = _this.utils.getMessageLanguage("mensaje.auth");
                    _this.btnScanerQR = true;
                }
                else {
                    //this.utils.presentAlert('Error-> '+res.message.code+": "+res.message.description);
                    _this.errorAdicional = true;
                    _this.imgResStatus = false;
                    _this.icono = "../../assets/img/rojo.jpg";
                    //this.utils.presentAlert(res.message.description);
                }
            }
            catch (error) {
                _this.utils.presentAlert("mensajeErrorControlado" + error);
            }
        }, function (error) {
            _this.errorAdicional = true;
            _this.icono = "../../assets/img/rojo.jpg";
            if (error) {
                _this.utils.presentAlert("mensaje.error");
                _this.storage.clear();
                _this.utils.clearVariableSesion();
                _this.navCtrl.setRoot("LoginPage");
            }
        });
    };
    QrPage.prototype.logout = function () {
        this.utils.presentConfirm("LoginPage");
    };
    QrPage.prototype.menu = function () {
        this.menuCtrl.toggle();
    };
    // Metodo para salir de la app
    QrPage.prototype.logoutApp = function () {
        var _this = this;
        //Obtención del messageId - PROVIENE DEL LOGIN
        this.storage.get('nameUser').then(function (val) {
            if (val != null) {
                //alert("logout 2");
                var aesUtil = new AesUtil(128, 1000);
                /*var newModel: string = this.utils.changePuntoComa(this.device.model);
        
                this.data = '{"iddev":"' + this.device.uuid + '",' +
                              '"model":"' + newModel + '",' +
                              '"cordova":"' + this.device.cordova + '",' +
                              '"plataform":"' + this.device.platform + '",' +
                              '"version":"' + this.device.version + '",' +
                              '"manufacturer":"' + this.device.manufacturer + '",' +
                              '"serial":"' + this.device.serial + '",' +
                              '"isVirtual":"' + this.device.isVirtual + '"}';*/
                _this.data = _this.utils.infoDevice();
                _this.encripData = aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, JSON.stringify(_this.data));
                // var iddevEnc: string = this.utils.encodePass(this.device.uuid); ASI ESTABA ANTERIORMENTE  21 MARZO 2019
                var iddevEnc = aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, _this.utils.deviceId);
                //Datos del dispositivo
                _this.jsonDataDevice =
                    {
                        "userName": val,
                        "company": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, "1"),
                        "appAuthType": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, "AUTH"),
                        "appProcess": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, "I"),
                        "device": {
                            "data": _this.encripData,
                            "iddev": iddevEnc
                        },
                        "authType": "AUTH",
                        "reasonCalled": "auth_valUser",
                        "scoreRiskCustomer": "0",
                        "geoRefLatitude": _this.latitud,
                        "geoRefLongitude": _this.longitud,
                        "deviceTrustId": aesUtil.encrypt(_this.http.salt, _this.http.iv, _this.http.passphrase, _this.utils.deviceId),
                        "deviceTrustData": _this.encripData,
                        "idkey": _this.http.idkey
                    };
                /*  this.jsonDataDevice2 =
                    {
                      "userName": val,
                      "device": {
                        "iddev": this.device.uuid,
                        "model": this.device.model,
                        "cordova": this.device.cordova,
                        "plataform": this.device.platform,
                        "version": this.device.version,
                        "manufacturer": this.device.manufacturer,
                        "serial": this.device.serial,
                        "isVirtual": this.device.isVirtual
                      }
                    }*/
                var urlLogin = "security/loginOut/";
                _this.http.callServer(_this.jsonDataDevice, urlLogin).then(function (res) {
                    //alert(res);
                    _this.message = JSON.stringify(res);
                    //alert("Respuesta Logout: "+this.message);
                    if (res.message.code == '0000' || res.message.description == 'STATUS OK') {
                        _this.utils.clearVariableSesion();
                        _this.utils.logout();
                    }
                }, function (error) {
                    _this.utils.presentAlert("mensajeConexion");
                });
            }
        });
    };
    //Metodo de confirmación para logout de la app
    QrPage.prototype.presentConfirm = function () {
        var _this = this;
        var alert = this.alertCtrl.create({
            title: this.utils.getMessageLanguage("logout.message"),
            message: this.utils.getMessageLanguage("logout.titulo"),
            buttons: [
                {
                    text: this.utils.getMessageLanguage("confirm.btnCancelar"),
                    handler: function (data) {
                        if (_this.utils.getMessageLanguage("confirm.btnCancelar")) {
                            console.log("Salida Cancelada");
                        }
                    }
                },
                {
                    text: this.utils.getMessageLanguage("confirm.btnAceptar"),
                    handler: function (data) {
                        if (_this.utils.getMessageLanguage("confirm.btnAceptar")) {
                            _this.utils.presentLoading();
                            _this.logoutApp();
                        }
                    }
                }
            ]
        });
        alert.present();
    };
    // ***************** CONFIGURACION DE NOTIFICACIONES PUSH ***********************
    QrPage.prototype.notificacionPush = function () {
        var _this = this;
        var titulo;
        var authVal;
        var authCod;
        var mensaje;
        // comprobamos los permisos
        this.push.hasPermission()
            .then(function (res) {
            if (res.isEnabled) {
                //alert('We have permission to send push notifications'); 
            }
            else {
                //alert('We do not have permission to send push notifications');
            }
        });
        // inicializamos la configuración para android y ios
        var options = {
            android: {
                senderID: '663636742494',
                //foreground: 'true',
                forceShow: true,
                sound: 'true'
            },
            ios: {
                alert: true,
                badge: true,
                sound: 'false'
            },
            windows: {}
        };
        var pushObject = this.push.init(options);
        pushObject.on('notification').subscribe(function (notification) {
            titulo = notification.title;
            var notificacion = notification.message;
            var temp1;
            var temp2;
            authVal = notificacion.slice(0, 2);
            temp1 = notificacion.split(" ");
            temp2 = temp1[0].split();
            authCod = temp1[0].slice(2);
            var zz = notificacion.split(":");
            mensaje = zz[1];
            _this.navCtrl.push("PushPage", { title: titulo, codOtp: authCod, msg: mensaje });
        });
        pushObject.on('registration').subscribe(function (registration) {
            var registrationId = registration.registrationId;
            var tk = registrationId;
        });
        pushObject.on('error').subscribe(function (error) {
            console.error('Error with Push plugin', error);
        });
    };
    QrPage.prototype.devolverse = function () {
        this.navCtrl.push("BandejaMenuPage");
    };
    QrPage.prototype.reiniciarSesion = function () {
        this.utils.reload();
    };
    return QrPage;
}());
QrPage = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["n" /* Component */])({
        selector: 'page-qr',template:/*ion-inline-start:"D:\PYT\development2\AppAuthenticator\src\pages\qr\qr.html"*/'<ion-header>\n\n    <!--\n    <ion-navbar hideBackButton>\n        <button ion-button menu-toggle (click)="menu()">\n          <ion-icon name="menu"></ion-icon>\n      </button> \n        <div id="logo"></div>\n        <div id="logOut" (click)="presentConfirm()"></div> \n      </ion-navbar>\n  -->\n</ion-header>\n\n<ion-content class="todo" (ionScroll)="reiniciarSesion()" (click)="reiniciarSesion()">\n\n    <!--\n    <ion-label class="ttlProductOverView">{{ \'qrTitulo\' | translate }}</ion-label>\n    <br>\n        \n    <div class="divTable">\n      <button ion-button full icon-left (click)="scanCode()" color="secondary" [disabled]="btnScanerQR">\n        <ion-icon name="qr-scanner"></ion-icon>{{ \'qrScanCode\' | translate }}\n      </button>\n    </div>\n  -->\n    <!--*ngIf="mostrarCreatedCode"\n    <ion-card>\n      <ngx-qrcode [qrc-value]="createdCode"></ngx-qrcode>\n    </ion-card>\n    \n    <br>\n    <div *ngIf="imgResStatus" class="confirmExitosa"></div>\n    <div *ngIf="errorAdicional" class="confirmFallida"></div>\n    <br>\n    <p *ngIf="imgResStatus" class="respServer">{{ \'qrRespuesta\' | translate }}:{{ resp }}</p>-->\n\n    <ion-img style="width: 280px;\n                    height: 60px; \n                    left: 15%;\n                    top: 40px;    \n                    position: absolute;\n                    margin-left: auto;\n                    margin:10px;\n                    display:block; \n                    background: #F0F2F4;" src="assets/img/new/LOGO.svg">\n    </ion-img>\n\n    <br><br><br><br><br><br><br><br>\n\n    <ion-card>\n        <ion-card-content>\n\n            <table>\n                <tr>\n                    <td>\n                        <span class="devolver" (click)="devolverse()">\n            <ion-img src="assets/img/new/BANDEJA_DEVOLVERSE.svg"></ion-img>\n          </span>\n                        <span class="otp">\n            <ion-img src="assets/img/new/BANDEJA_QR.svg"></ion-img>\n          </span>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div class="texto">\n                            {{ \'qrTitulo\' | translate }}\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <!-- Empieza -->\n\n                        <!--*ngIf="mostrarCreatedCode"-->\n                        <div *ngIf="mostrarCreatedCode" style="padding-top: 15px;">\n                            <ngx-qrcode [qrc-value]="createdCode"></ngx-qrcode>\n                        </div>\n\n                        <!-- Termina -->\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <br>\n                        <div>\n                            <!--[disabled]="btnScanerQR"-->\n                            <button ion-button full icon-left (click)="scanCode()" style="background: #F0F2F4; box-shadow: 0px 0px 5px 1px white;" [disabled]="btnScanerQR">\n              <ion-icon name="qr-scanner"></ion-icon>{{ \'qrScanCode\' | translate }}\n            </button>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n\n            <br>\n\n            <div *ngIf="imgResStatus" class="confirmExitosa"></div>\n            <div *ngIf="errorAdicional" class="confirmFallida"></div>\n            <br>\n            <p *ngIf="imgResStatus" class="respServer">{{ \'qrRespuesta\' | translate }}:{{ resp }}</p>\n\n        </ion-card-content>\n    </ion-card>\n\n\n</ion-content>'/*ion-inline-end:"D:\PYT\development2\AppAuthenticator\src\pages\qr\qr.html"*/,
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__["j" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["k" /* NavParams */], __WEBPACK_IMPORTED_MODULE_2__ionic_native_barcode_scanner__["a" /* BarcodeScanner */], __WEBPACK_IMPORTED_MODULE_3__ionic_storage__["b" /* Storage */], __WEBPACK_IMPORTED_MODULE_4__providers_utils_utils__["a" /* UtilsProvider */],
        __WEBPACK_IMPORTED_MODULE_5__providers_http_http__["a" /* HttpProvider */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["h" /* MenuController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["a" /* AlertController */], __WEBPACK_IMPORTED_MODULE_6__ionic_native_push___["a" /* Push */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["l" /* Platform */]])
], QrPage);

//# sourceMappingURL=qr.js.map

/***/ })

});
//# sourceMappingURL=6.js.map